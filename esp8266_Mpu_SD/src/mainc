/**/
#include <Arduino.h>
#include "Wire.h"
#include "FS.h"
#include "SD.h"
#include "SPI.h"
#include "I2Cdev.h"
#include "MPU6050_6Axis_MotionApps20.h"

#define OFFSET 0               // us (tient compte du temps d'exécution de updateTime)
#define sleepPeriod 10000000ul // 10 seconds sleep
MPU6050 accelgyro;
int16_t ax, ay, az;
int16_t gx, gy, gz;
#define OUTPUT_READABLE_ACCELGYRO

String dosya;
ACS712 acs712_1(ACS712_05B, 4);
ACS712 acs712_2(ACS712_05B, 25);
ACS712 acs712_3(ACS712_05B, 15);
int16_t cal1;
int16_t cal2;
int16_t cal3;
int16_t acc;
String sutun1 = "Örnek_Sayısı";
String sutun2 = "AC_akım1";
String sutun3 = "DC akım1";
String sutun4 = "AC_akım2";
String sutun5 = "DC akım2";
String sutun6 = "AC_akım3";
String sutun7 = "DC_akım3";
String sutun8 = "gecen_Sure_ms";
String str = sutun1 + "," + sutun2 + "," + sutun3 + "," + sutun4 + "," + sutun5 + "," + sutun6 + "," + sutun7 + "," + sutun8 + "\n\n";
uint16_t dosya_no;
uint16_t ornek_no;
String dosya_adi;
int address = 0;
int address_1;
String str1;
uint32_t baslangic;
uint32_t gecen;
bool getLocalTime(struct tm *info, uint32_t ms)
{
  uint32_t start = millis();
  time_t now;
  while ((millis() - start) <= ms)
  {
    time(&now);
    localtime_r(&now, info);
    if (info->tm_year > (2016 - 1900))
    {
      return true;
    }
    delay(10);
  }
  return false;
}

int ornek_say;
#define timeSeconds 10
#define BUTTON_PIN_BITMASK 0x1000 // 2^33 in hex
/////SD KART FONKSİYONLARI////////////
void printLocalTime()
{
  time(&now);
  timeinfo = localtime(&now);
  Serial.println(asctime(timeinfo));
  // Serial.printf("%s\n",asctime(timeinfo));
  delay(2); // 26 bytes@115200 baud is less than 2 ms
}
void updateTime(uint64_t elapsedTime)
{ // elapsedTime in us
  if (elapsedTime == 0)
    Mics += micros();
  else
    Mics += elapsedTime;
  if (Mics > 10000000)
  {
    Mics = Mics % 1000000;
    now += Mics / 10000000;
  }
}
void sommeil(unsigned long chrono)
{
  updateTime(sleepPeriod - (micros() - chrono) + OFFSET);
  esp_sleep_enable_timer_wakeup(sleepPeriod - (micros() - chrono));
  esp_deep_sleep_start();
}
void listDir(fs::FS &fs, const char *dirname, uint8_t levels)
{
  Serial.printf("Listing directory:%s\n", dirname);
  File root = fs.open(dirname);
  if (!root)
  {
    Serial.println("Failed to open directory");
    return;
  }
  if (!root.isDirectory())
  {
    Serial.println("Not a directory");
    return;
  }
  File file = root.openNextFile();
  while (file)
  {
    if (file.isDirectory())
    {
      Serial.print("  DIR : ");
      Serial.println(file.name());
      if (levels)
      {
        listDir(fs, file.name(), levels - 1);
      }
    }

    else
    {
      Serial.println("FILE:");
      Serial.println(file.name());
      Serial.print("  SIZE: ");
      Serial.println(file.size());
    }
    file = root.openNextFile();
  }
}
void createDir(fs::FS &fs, const char *path)
{

  Serial.printf("Creating Dir:%s\n", path);
  if (fs.mkdir(path))
  {
    Serial.println("Dir created");
  }
  else
  {
    Serial.println("Mkdir failed");
  }
}
void removeDir(fs::FS &fs, const char *path)
{
  Serial.printf("Removing Dir:%s\n", path);
  if (fs.rmdir(path))
  {
    Serial.printf("Dir removed");
  }
  else
  {
    Serial.println("rmdir failed");
  }
}
void writeFile(fs::FS &fs, const char *path, const char *message)
{
  Serial.printf("Writing file: %s\n", path);
  File file = fs.open(path, FILE_WRITE);
  if (!file)
  {
    Serial.println("Failed to open file for wwriting");
    return;
  }
  if (file.print(message))
  {
    Serial.println("File written");
  }
  else
  {
    Serial.println("Write failed");
  }
  file.close();
}
void appendFile(fs::FS &fs, const char *path, const char *message)
{
  Serial.printf("Appending to file: %s\n", path);

  File file = fs.open(path, FILE_APPEND);
  if (!file)
  {
    Serial.println("Failed to open file for appending");
    return;
  }
  if (file.print(message))
  {
    Serial.println("Message appended");
  }
  else
  {
    Serial.println("Appended failed");
    return;
  }
  file.close();
}
//////////////////////

void setup()
{

  Serial.begin(115200);
  if (!EEPROM.begin(1000))
  {
    Serial.println("Failed to initialise EEPROM");
    Serial.println("Restarting...");
    delay(1000);
    ESP.restart();
  }
  address_1 = address + sizeof(int);

  dosya_no = EEPROM.readUInt(address);
  dosya_adi = "/performans_data" + String(dosya_no);

  ////SD KART////
  if (!SD.begin())
  {
    Serial.println("Card mount failed");
    return;
  }
  uint8_t cardType = SD.cardType();
  if (cardType == CARD_NONE)
  {
    Serial.println("No SD card attached");
    return;
  }
  Serial.print("SD Card Type: ");
  if (cardType == CARD_MMC)
  {
    Serial.println("MMC");
  }
  else if (cardType == CARD_SD)
  {
    Serial.println("SDSC");
  }
  else if (cardType == CARD_SDHC)
  {
    Serial.println("SDHC");
  }
  else
  {
    Serial.println("UNKNOWN");
  }

  uint64_t cardSize = SD.cardSize() / (1024 * 1024);
  Serial.printf("SD Card Size: %lluMB\n", cardSize);
  // createDir(SD, dosya_adi.c_str());
  str1 = "/" + dosya_adi + ".txt";

  // writeFile(SD,dosya_adi.c_str(), str.c_str());
  appendFile(SD, str1.c_str(), str.c_str());
  // appendFile(SD, "/hello.txt", "World!\n");
  dosya_no = dosya_no + 1;
  // Serial.printf("Dosya No:%s",dosya_no);
  EEPROM.writeUInt(address, dosya_no);
  EEPROM.commit();
  Serial.println(dosya_no);

  Wire.begin(21, 22);
  Serial.println(dosya);
  while (!Serial)
    ; // wait for Leonardo enumeration, others continue immediately
  accelgyro.initialize();
  Serial.println("Testing device connections...");
  Serial.println(accelgyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
  // use the code below to change accel/gyro offset values
  /*
    Serial.println("Updating internal sensor offsets...");
    // -76  -2359 1688  0 0 0
    Serial.print(accelgyro.getXAccelOffset()); Serial.print("\t"); // -76
    Serial.print(accelgyro.getYAccelOffset()); Serial.print("\t"); // -2359
    Serial.print(accelgyro.getZAccelOffset()); Serial.print("\t"); // 1688
    Serial.print(accelgyro.getXGyroOffset()); Serial.print("\t"); // 0
    Serial.print(accelgyro.getYGyroOffset()); Serial.print("\t"); // 0
    Serial.print(accelgyro.getZGyroOffset()); Serial.print("\t"); // 0
    Serial.print("\n");
    accelgyro.setXGyroOffset(220);
    accelgyro.setYGyroOffset(76);
    accelgyro.setZGyroOffset(-85);
    Serial.print(accelgyro.getXAccelOffset()); Serial.print("\t"); // -76
    Serial.print(accelgyro.getYAccelOffset()); Serial.print("\t"); // -2359
    Serial.print(accelgyro.getZAccelOffset()); Serial.print("\t"); // 1688
    Serial.print(accelgyro.getXGyroOffset()); Serial.print("\t"); // 0
    Serial.print(accelgyro.getYGyroOffset()); Serial.print("\t"); // 0
    Serial.print(accelgyro.getZGyroOffset()); Serial.print("\t"); // 0
    Serial.print("\n");
  */
}

void loop()
{

  Serial.println(address_1);
  gecen = millis() - baslangic;

  String olcum = String(ornek_no) + "," + String(acs712_1.getCurrentAC()) + "," + String(acs712_1.getCurrentDC()) + "," + String(acs712_2.getCurrentAC()) + "," + String(acs712_2.getCurrentDC()) + "," + String(acs712_3.getCurrentAC()) + "," + String(acs712_3.getCurrentDC()) + "," + String(gecen) + "\n";

  appendFile(SD, str1.c_str(), olcum.c_str());
  // appendFile(SD, str1.c_str(), str.c_str());
  Serial.println(olcum);
  Serial.println(EEPROM.readUInt(address));

  Serial.println("gecen :");
  Serial.println(gecen);
  baslangic = millis();
  ornek_no += 1;

  delay(300);

  String giris = String("ax") + "," + String("ay") + "," + String("az") + "," + String("gx") + "," + String("gy") + "," + String("gz") + "," + String("gecen_zaman") +
                 "," + String("ornek_say") + "\n";
  int str_len = giris.length() + 1;
  char b[str_len];
  giris.toCharArray(b, str_len);
  appendFile(SD, "/dosya.txt", b);
}
accelgyro.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

gecen_zaman = millis() - baslangic;

// Define
String str = String(ax) + "," + String(ay) + "," + String(az) + "," + String(gx) + "," + String(gy) + "," + String(gz) + "," + String(gecen_zaman) +
             "," + String(ornek_say) + "\n";
Serial.println(str);

// Length (with one extra character for the null terminator)
int str_len = str.length() + 1;

// Prepare the character array (the buffer)
char a[str_len];

// Copy it over
str.toCharArray(a, str_len);
appendFile(SD, "/dosya.txt", a);

baslangic = millis();
ornek_say++;
delay(10);
}